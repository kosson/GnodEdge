import fs from 'node:fs/promises';
import { parse } from 'csv-parse';
import inquirer from 'inquirer';
import {connectToDatabase} from './db.js';

let dbFileName = `publications.sqlite`;
let db = await connectToDatabase(dbFileName); // connect to the database

// preparing for a possible interface

/* === PRIMARY SETTING UP for `articles` table === */
// for this scenario, the nodes are the titles of the articles and their corresponding ids are generated by Zotero at export time as CSV
let nodesTabelHeadStructure = `Id,Label,` + `Year,Author,JournalAccr,Kw`; // Mind that the `Id` and `Label` should be strict as such. The rest of the atributes may be of your own choosing
let nodesTableRecordMarcherIdxs = [0, 3, 1, 2, 4, 5]; // These are the indexes of every value in an array representing a line from the CSV. This is useful when you want some other entity as node value (`Label`)
let nodesTableValPlaceholders = `?, ?, ?, ?, ?, ?`; // the number of the question marks should match the number of the values in the head (`nodesTabelHeadStructure`)
let mainTablename = `articles`;
// the query needed to create `articles` table
let tableExistsQuery = `SELECT count(*) as result FROM sqlite_master WHERE type='table' AND name='${mainTablename}'`;
// QUERY needed for creating the table
let tblCreateQuery = `
CREATE TABLE articles
(
  Id           VARCHAR(10),
  Label        VARCHAR(50),
  Year         INT,
  Author       VARCHAR(20),
  JournalAccr  VARCHAR(10),
  Kw           VARCHAR(50)
)
`;

/**
 *The function is populating the `articles` table with the data 
 *from the source file
 *
 */
async function populateTable () {
  // read the file source
  const fd = await fs.open("./sourcefile/data-prima-forma.csv");
  fd.createReadStream()
      .pipe(parse({ delimiter: ",", from_line: 2 }))
      .on("data", function clbkWorkOnRow(row) {
        // console.log(`Valorile rÃ¢ndului sunt ${row[0]}, apoi ${row[1]}`);

        // prepare and load the data
        let prepStmt = db.prepare(`INSERT INTO articles(${nodesTabelHeadStructure}) VALUES (${nodesTableValPlaceholders})`);
        // prepStmt.run([row[0],row[3],row[1],row[2],row[4],row[5]], function clbkerrorinsert(error) {
        prepStmt.run(nodesTableRecordMarcherIdxs.map(idx => row[idx]), function clbkerrorinsert(error) {
          if (error) {
            throw new Error(`At inserting the data, this error appeared: ${error.message}`);
          } else {
            console.log(`Inserted row: ${this.lastID}`);
          }
        });
        prepStmt.finalize();

        // check if all was loaded OK
        // db.each("SELECT rowid AS id, title FROM articles", function(err, row) {
        //   console.log(row.id + ": " + row.title);
        // });
      })
      .on("end", function () {
          console.log("finished");
      })
      .on("error", function (error) {
          console.log(error.message);
      }); 
}

try {
  /*
  * === SETTING UP THE DATABASE ===
  * Investigate if the table exists. If it exists, ask user if she/he wants to wipe clean the data.
  * If it doesn't exists, create the table
  * The user can opt for cleaning the table and repopulating with fresh data from the source.
  * As soon as the data was wipped, the table will be repopulated with the data from the source.
  */
  db.get(tableExistsQuery, async function clbkTableExists (error, count) {
    if (error) {
      throw new Error(`I've looked for the table, but this error appeared ${error}`);
    } else if (count['result'] === 1) {
      console.log(`Table already exists, silly ol' chap!`);

      // put an option to cleaning the existing data (https://betterprogramming.pub/how-to-create-beautiful-command-line-interactions-with-node-js-2fcdfbbac62c)
      inquirer.prompt([
        {
          type: 'checkbox',
          name: 'wipe',
          message: 'Would you like me to clean the data of the articles table?',
          default: 'no',
          choices: [
            {name: 'no'},
            {name: 'yes', checked: false},
          ],
        },
      ]).then(async function getMeAnswers (answers) {
        // if you want to clean the data from the table, you must have an `yes` value for an answer 
        if (answers.wipe == 'yes') {
          db.run(`DELETE FROM ${mainTablename}`, function clbkDeleteFromArticles (error) {
            if (error) {
              throw new Error (`Wipping table data raised this error: ${error}`);
            } else {
              console.log(`I've wipped clean the data from the table`);
            }
          });
          // as soon as the data was wipped, the table will be repopulated with the data from the source
          await populateTable();
        }
      }).catch((error) => {
        if (error.isTtyError) {
          throw new Error (`Prompt couldn't be rendered in the current environment`);
        } else {
          throw new Error (`When cleaning the table the following error was raised: ${error}`);
        }      
      });
    } else {
      db.exec(tblCreateQuery);
      await populateTable();
    }
  });

  /*
  * Case study:
  * I want every piece of a keyword list to become an entity with an id (md5 generated)
  * 
  * #1 Create a table `concepts` where new records are the individual keywords from the article records
  *  - Create a function which adds a record as long as the `Label` was not already inserted
  *  - The record should look like: `[Id]CD4GRTT [Label]machine learning
  * #2 Create a table of `edges` where the the following conditions are met in the following workflow:
  *  - take one record from the `concepts` table and look up for all the records from the `articles` table where it appears in the `kw` field.
  *  - if it is matched, create a record in the table `edges` where you have te following fields: 
  *   - [Source] the id of the concept [Target] the id of the article [Weight:integer] 1 [Type:string] Directed [Kind:string] descriptor [Year:integer] 2002 (the year when the article was published) [JournalAccr:string] DL'09
  */

  // create `concepts` table
} catch (error) {
  console.log(error);
}

